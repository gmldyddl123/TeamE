//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Action/UI/InventoryInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InventoryInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InventoryInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InventoryInputAction"",
    ""maps"": [
        {
            ""name"": ""Inven"",
            ""id"": ""1ecd6251-2e4c-46a1-a05f-93413257c77c"",
            ""actions"": [
                {
                    ""name"": ""OpenInven"",
                    ""type"": ""Button"",
                    ""id"": ""3c8b49cd-5ec3-4c34-b7b5-64811b353131"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0199ca5c-33b3-4e6f-9bcc-1be163d68d2e"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenInven"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ae628927-4c8f-4f77-9684-34eba0e13642"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenInven"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Inven
        m_Inven = asset.FindActionMap("Inven", throwIfNotFound: true);
        m_Inven_OpenInven = m_Inven.FindAction("OpenInven", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Inven
    private readonly InputActionMap m_Inven;
    private List<IInvenActions> m_InvenActionsCallbackInterfaces = new List<IInvenActions>();
    private readonly InputAction m_Inven_OpenInven;
    public struct InvenActions
    {
        private @InventoryInputAction m_Wrapper;
        public InvenActions(@InventoryInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @OpenInven => m_Wrapper.m_Inven_OpenInven;
        public InputActionMap Get() { return m_Wrapper.m_Inven; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InvenActions set) { return set.Get(); }
        public void AddCallbacks(IInvenActions instance)
        {
            if (instance == null || m_Wrapper.m_InvenActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InvenActionsCallbackInterfaces.Add(instance);
            @OpenInven.started += instance.OnOpenInven;
            @OpenInven.performed += instance.OnOpenInven;
            @OpenInven.canceled += instance.OnOpenInven;
        }

        private void UnregisterCallbacks(IInvenActions instance)
        {
            @OpenInven.started -= instance.OnOpenInven;
            @OpenInven.performed -= instance.OnOpenInven;
            @OpenInven.canceled -= instance.OnOpenInven;
        }

        public void RemoveCallbacks(IInvenActions instance)
        {
            if (m_Wrapper.m_InvenActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInvenActions instance)
        {
            foreach (var item in m_Wrapper.m_InvenActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InvenActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InvenActions @Inven => new InvenActions(this);
    public interface IInvenActions
    {
        void OnOpenInven(InputAction.CallbackContext context);
    }
}
